openapi: 3.0.1
info:
  title: Memory API
  description: API to ingest memory texts into a Redis vector index and search them.
  version: 0.1.0

x-sfdc:
  agent:
    topic:
      classificationDescription: This API allows agents to ingest and search memory texts for retrieval.
      scope: Your job is to accept user-provided memory texts and store or search them.
      instructions:
        - If the user wants to store memories, collect the memory text(s) and call the ingestion endpoint.
        - If the user wants to retrieve memories, collect the query and call the search endpoint.
        - Do not request additional fields; configuration is handled server-side.
      name: memory_api

servers:
  - url: http://localhost:8000
    description: Local development server

tags:
  - name: Health
    description: Health and diagnostics
  - name: Memories
    description: Endpoints for ingesting and searching memories

paths:
  /memories:ingest:
    post:
      tags:
        - Memories
        - Agentforce Actions
      description: Accepts a memory text with an optional type label and ingests it into the vector index.
      operationId: createMemory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateMemoryRequest"
            examples:
              basic:
                summary: Ingest one memory
                value:
                  text: Met Alice to discuss Q4 roadmap.
                  type: semantic
      responses:
        "200":
          description: Ingestion succeeded
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateMemoryResponse"
              examples:
                success:
                  value:
                    id: memories:f1e788ee61fe410daa8ef941dd166223
        "400":
          description: Invalid request (e.g., empty text)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                invalid:
                  value:
                    detail: text must be non-empty
        "500":
          description: Server-side error while embedding or writing
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      x-sfdc:
        agent:
          action:
            publishAsAgentAction: true
            isUserInput: true
            isDisplayable: true
            isPii: true

  /memories:search:
    get:
      tags:
        - Memories
      description: Performs KNN similarity search over ingested memories.
      operationId: searchMemories
      parameters:
        - name: query
          in: query
          required: true
          schema:
            type: string
            minLength: 1
          description: Search query text.
        - name: k
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 5
          description: Number of top results to return.
        - name: type
          in: query
          required: false
          schema:
            type: string
          description: Optional memory type filter (e.g., task, idea, note, semantic, episodic).
        - name: status
          in: query
          required: false
          schema:
            type: string
          description: Optional status filter. Supports single values (e.g., "active") or multiple values with OR logic using comma separation (e.g., "active,consolidated,archived").
        - name: user_id
          in: query
          required: false
          schema:
            type: string
          description: Optional user ID filter to search memories for a specific user.
      responses:
        "200":
          description: Search succeeded
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SearchResponseItem"
              examples:
                results:
                  value:
                    - type: semantic
                      created_at: "2024-09-23T00:00:00Z"
                      text: Met Alice to discuss Q4 roadmap.
                    - type: user
                      created_at: "2024-09-23T00:00:20Z"
                      text: User prefers concise summaries and dark mode UI.
        "400":
          description: Invalid request (e.g., empty query)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                invalid:
                  value:
                    detail: query must be non-empty
        "500":
          description: Server-side error while embedding or searching
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /memories/{memory_id}:
    get:
      tags:
        - Memories
      description: Get a specific memory by its unique identifier.
      operationId: getMemoryById
      parameters:
        - name: memory_id
          in: path
          required: true
          schema:
            type: string
          description: The unique memory identifier.
          example: "memories:f1e788ee61fe410daa8ef941dd166223"
      responses:
        "200":
          description: Memory found successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchResponseItem"
              examples:
                found:
                  value:
                    id: "memories:f1e788ee61fe410daa8ef941dd166223"
                    type: "task"
                    created_at: "2024-09-23T00:00:00Z"
                    userId: "005xx000001Sv6dAAC"
                    status: "active"
                    text: "Implement user authentication system"
                    title: "Auth System Task"
                    score: null
        "400":
          description: Invalid memory ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                invalid:
                  value:
                    detail: "memory_id must be non-empty"
        "404":
          description: Memory not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                not_found:
                  value:
                    detail: "Memory with ID 'invalid_id' not found"
        "500":
          description: Server-side error while retrieving memory
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      tags:
        - Memories
      description: Delete a specific memory by its unique identifier.
      operationId: deleteMemoryById
      parameters:
        - name: memory_id
          in: path
          required: true
          schema:
            type: string
          description: The unique memory identifier.
          example: "memories:f1e788ee61fe410daa8ef941dd166223"
      responses:
        "200":
          description: Memory deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteMemoryResponse"
              examples:
                deleted:
                  value:
                    message: "Memory 'memories:f1e788ee61fe410daa8ef941dd166223' deleted successfully"
                    deleted: true
        "400":
          description: Invalid memory ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                invalid:
                  value:
                    detail: "memory_id must be non-empty"
        "404":
          description: Memory not found or could not be deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                not_found:
                  value:
                    detail: "Memory with ID 'invalid_id' not found or could not be deleted"
        "500":
          description: Server-side error while deleting memory
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

components:
  schemas:
    HealthResponse:
      type: object
      properties:
        status:
          type: string
          example: ok
        redis_host:
          type: string
          nullable: true
          example: localhost

    CreateMemoryRequest:
      type: object
      required:
        - text
      properties:
        text:
          type: string
          description: Memory text text to ingest.
          minLength: 1
        type:
          type: string
          description: Optional classification label.
          default: generic

    CreateMemoryResponse:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          description: Created memory id/key.
          example: memories:f1e788ee61fe410daa8ef941dd166223

    SearchResponseItem:
      type: object
      properties:
        id:
          type: string
          nullable: true
          description: Unique memory identifier
          example: "memories:f1e788ee61fe410daa8ef941dd166223"
        type:
          type: string
          nullable: true
          description: Memory type classification
          example: "task"
        created_at:
          type: string
          nullable: true
          format: date-time
          description: Date time for when the memory was created/ingested.
          example: "2024-09-23T00:00:00Z"
        userId:
          type: string
          nullable: true
          description: User ID associated with the memory
          example: "005xx000001Sv6dAAC"
        status:
          type: string
          nullable: true
          description: Memory status
          example: "active"
        text:
          type: string
          description: Memory content
          example: "Met Alice to discuss Q4 roadmap."
        title:
          type: string
          nullable: true
          description: Memory title
          example: "Q4 Planning Meeting"
        score:
          type: number
          format: float
          nullable: true
          description: Similarity search score
          example: 0.85

    DeleteMemoryResponse:
      type: object
      required:
        - message
        - deleted
      properties:
        message:
          type: string
          description: Success message describing the deletion
          example: "Memory 'memories:f1e788ee61fe410daa8ef941dd166223' deleted successfully"
        deleted:
          type: boolean
          description: Whether the deletion was successful
          example: true

    ErrorResponse:
      type: object
      properties:
        detail:
          description: Error detail message or structure returned by the server.
          oneOf:
            - type: string
            - type: object
